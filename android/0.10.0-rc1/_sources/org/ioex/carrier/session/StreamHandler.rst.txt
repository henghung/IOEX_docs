StreamHandler
=============

.. java:package:: org.ioex.carrier.session
   :noindex:

.. java:type:: public interface StreamHandler

   The interface to carrier stream instance. Include stream status callback, stream data callback, and channel callbacks.

Methods
-------
onChannelClose
^^^^^^^^^^^^^^

.. java:method::  void onChannelClose(Stream stream, int channel, CloseReason reason)
   :outertype: StreamHandler

   The callback function to be called when channel close.

   :param stream: The carrier stream instance
   :param channel: The current channel ID.
   :param reason: Channel close reason code, defined in CloseReason.

onChannelData
^^^^^^^^^^^^^

.. java:method::  boolean onChannelData(Stream stream, int channel, byte[] data)
   :outertype: StreamHandler

   The callback functiont to be called when channel received incoming data.

   :param stream: The carrier stream instance
   :param channel: The current channel ID
   :param data: The received data
   :return: True on success, or false if an error occurred. If this callback return false, the channel will be closed with CloseReason_Error.

onChannelOpen
^^^^^^^^^^^^^

.. java:method::  boolean onChannelOpen(Stream stream, int channel, String cookie)
   :outertype: StreamHandler

   The callback function to be called when new multiplexing channel request to open.

   :param stream: The carrier stream instance
   :param channel: The current channel ID.
   :param cookie: Application defined string data send from remote peer.
   :return: True on success, or false if an error occurred. The channel will continue to open only this callback return true, otherwise the channel will be closed.

onChannelOpened
^^^^^^^^^^^^^^^

.. java:method::  void onChannelOpened(Stream stream, int channel)
   :outertype: StreamHandler

   The callback function to be called when new multiplexing channel opened.

   :param stream: The carrier stream instance
   :param channel: The current channel ID

onChannelPending
^^^^^^^^^^^^^^^^

.. java:method::  void onChannelPending(Stream stream, int channel)
   :outertype: StreamHandler

   The callback function to be called when remote peer ask to pend data sending.

   :param stream: The carrier stream instance
   :param channel: The current channel ID

onChannelResume
^^^^^^^^^^^^^^^

.. java:method::  void onChannelResume(Stream stream, int channel)
   :outertype: StreamHandler

   The callback function to be called when remote peer ask to resume data sending.

   :param stream: The carrier stream instance
   :param channel: The current channel ID

onStateChanged
^^^^^^^^^^^^^^

.. java:method::  void onStateChanged(Stream stream, StreamState state)
   :outertype: StreamHandler

   The callback function to report state of stream when it's state changes.

   :param stream: The carrier stream instance
   :param state: Stream state defined in StreamState

onStreamData
^^^^^^^^^^^^

.. java:method::  void onStreamData(Stream stream, byte[] data)
   :outertype: StreamHandler

   The callback will be called when the stream receives incoming packet. If the stream enabled multiplexing mode, application will not receive stream-layered data callback any more. All data will reported as multiplexing channel data.

   :param stream: The carrier stream instance
   :param data: The received packet data

