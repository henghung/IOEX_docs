.. java:import:: org.ioex.carrier Log

.. java:import:: org.ioex.carrier.exceptions IOEXException

Session
=======

.. java:package:: org.ioex.carrier.session
   :noindex:

.. java:type:: public class Session

   The class representing Carrier session conversion with friends.

Methods
-------
addService
^^^^^^^^^^

.. java:method:: public void addService(String service, PortForwardingProtocol protocol, String host, String port) throws IOEXException
   :outertype: Session

   Add a new portforwarding service to session. The registered services can be used by remote peer in portforwarding request.

   :param service: The new service name, should be unique in session scope
   :param protocol: The protocol of the service
   :param host: The host name or ip of the service
   :param port: The port of the service
   :throws IllegalArgumentException: IOEXException

addStream
^^^^^^^^^

.. java:method:: public Stream addStream(StreamType type, int options, StreamHandler handler) throws IOEXException
   :outertype: Session

   Add a new stream to session. Carrier stream supports several underlying transport mechanisms: - Plain/encrypted UDP data gram protocol - Plain/encrypted TCP like reliable stream protocol - Multiplexing over UDP - Multiplexing over TCP like reliable protocol Application can use options to specify the new stream mode. Multiplexing over UDP can not provide reliable transport.

   :param type: The stream type defined in StreamType
   :param options: The stream mode options. options are constructed by a bitwise-inclusive OR of flags
   :param handler: The Application defined inerface to StreamHandler
   :throws IllegalArgumentException: IOEXException
   :return: The new added carrier stream

close
^^^^^

.. java:method:: public synchronized void close()
   :outertype: Session

   Close a session to friend. All resources include streams, channels, portforwardings associated with current session will be destroyed.

finalize
^^^^^^^^

.. java:method:: @Override protected void finalize() throws Throwable
   :outertype: Session

getPeer
^^^^^^^

.. java:method:: public String getPeer()
   :outertype: Session

   Get remote peer id.

   :return: The remote peer userid.

removeService
^^^^^^^^^^^^^

.. java:method:: public void removeService(String service)
   :outertype: Session

   Remove a portforwarding server to session. This function has not effect on existing portforwarings.

   :param service: The service name.

removeStream
^^^^^^^^^^^^

.. java:method:: public void removeStream(Stream stream) throws IOEXException
   :outertype: Session

   Remove a stream from session.

   :param stream: The Stream to be removed
   :throws IllegalArgumentException: IOEXException

replyRequest
^^^^^^^^^^^^

.. java:method:: public void replyRequest(int status, String reason) throws IOEXException
   :outertype: Session

   Reply the session request from friend. This function will send a session response to friend.

   :param status: The status code of the response. 0 is success, otherwise is error
   :param reason: The error message if status is error, or null if success
   :throws IllegalArgumentException: IOEXException

request
^^^^^^^

.. java:method:: public void request(SessionRequestCompleteHandler handler) throws IOEXException
   :outertype: Session

   Send session request to the friend.

   :param handler: A handler to the SessionRequestCompleteHandler to receive the session response
   :throws IllegalArgumentException: IOEXException

start
^^^^^

.. java:method:: public void start(String sdp) throws IOEXException
   :outertype: Session

   Begin to start a session. All streams in current session will try to connect with remote friend, The stream status will update to application by stream's StreamHandler.

   :param sdp: The remote user's SDP. Reference: https://tools.ietf.org/html/rfc4566
   :throws IllegalArgumentException: IOEXException

